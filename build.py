#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de build para o Processador de DARMs
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def run_command(command, description):
    """Executa um comando e trata erros"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao {description.lower()}: {e}")
        print(f"Stderr: {e.stderr}")
        return None

def clean_build_dirs():
    """Limpa diret√≥rios de build anteriores"""
    dirs_to_clean = ['build', 'dist', '*.egg-info']
    for dir_pattern in dirs_to_clean:
        for path in Path('.').glob(dir_pattern):
            if path.is_dir():
                print(f"üßπ Removendo {path}...")
                shutil.rmtree(path)

def build_package():
    """Constr√≥i o pacote Python"""
    # Limpar builds anteriores
    clean_build_dirs()
    
    # Verificar se setuptools est√° instalado
    try:
        import setuptools
    except ImportError:
        print("‚ùå setuptools n√£o encontrado. Instalando...")
        run_command("pip install setuptools wheel", "Instalando setuptools e wheel")
    
    # Construir o pacote
    print("üì¶ Construindo pacote...")
    run_command("python setup.py sdist bdist_wheel", "Construindo distribui√ß√£o")
    
    # Verificar se os arquivos foram criados
    dist_dir = Path("dist")
    if dist_dir.exists():
        files = list(dist_dir.glob("*"))
        print(f"‚úÖ Arquivos criados em dist/:")
        for file in files:
            print(f"   üìÑ {file.name} ({file.stat().st_size / 1024:.1f} KB)")

def install_package():
    """Instala o pacote localmente para teste"""
    print("üîß Instalando pacote localmente...")
    run_command("pip install -e .", "Instala√ß√£o em modo desenvolvimento")

def create_executable():
    """Cria execut√°vel usando PyInstaller (se dispon√≠vel)"""
    try:
        import PyInstaller
        print("üì¶ Criando execut√°vel com PyInstaller...")
        run_command("pyinstaller --onefile --name darm-processor darm_processor.py", "Criando execut√°vel")
    except ImportError:
        print("‚ö†Ô∏è  PyInstaller n√£o encontrado. Para criar execut√°vel, instale com: pip install pyinstaller")

def create_docker_image():
    """Cria imagem Docker (se Docker estiver dispon√≠vel)"""
    dockerfile_content = """FROM python:3.9-slim

WORKDIR /app

# Instalar depend√™ncias do sistema
RUN apt-get update && apt-get install -y \\
    && rm -rf /var/lib/apt/lists/*

# Copiar requirements e instalar depend√™ncias Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copiar c√≥digo da aplica√ß√£o
COPY . .

# Criar diret√≥rios necess√°rios
RUN mkdir -p darms inserts

# Expor volume para dados
VOLUME ["/app/darms", "/app/inserts"]

# Comando padr√£o
CMD ["python", "darm_processor.py"]
"""
    
    with open("Dockerfile", "w", encoding="utf-8") as f:
        f.write(dockerfile_content)
    
    print("üê≥ Dockerfile criado!")
    print("Para construir a imagem Docker, execute:")
    print("docker build -t darm-processor .")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Iniciando processo de build do Processador de DARMs")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not Path("darm_processor.py").exists():
        print("‚ùå Erro: darm_processor.py n√£o encontrado!")
        print("Execute este script no diret√≥rio raiz do projeto.")
        sys.exit(1)
    
    # Menu de op√ß√µes
    print("\nüìã Op√ß√µes de build:")
    print("1. Construir pacote Python (sdist + wheel)")
    print("2. Instalar localmente (modo desenvolvimento)")
    print("3. Criar execut√°vel (requer PyInstaller)")
    print("4. Criar Dockerfile")
    print("5. Executar tudo")
    print("0. Sair")
    
    choice = input("\nEscolha uma op√ß√£o (0-5): ").strip()
    
    if choice == "1":
        build_package()
    elif choice == "2":
        install_package()
    elif choice == "3":
        create_executable()
    elif choice == "4":
        create_docker_image()
    elif choice == "5":
        build_package()
        install_package()
        create_docker_image()
        print("\nüéâ Processo completo!")
        print("\nüì¶ Para distribuir:")
        print("   - Pacote Python: arquivos em dist/")
        print("   - Execut√°vel: arquivo em dist/ (se PyInstaller instalado)")
        print("   - Docker: docker build -t darm-processor .")
    elif choice == "0":
        print("üëã Saindo...")
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main() 