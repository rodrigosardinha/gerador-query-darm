#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do Processador de DARMs em Python

Este script testa as funcionalidades principais do DarmProcessor
para garantir que tudo est√° funcionando corretamente.
"""

import asyncio
import os
import tempfile
import shutil
from pathlib import Path
from darm_processor import DarmProcessor
from config import validate_config, get_message

class DarmProcessorTester:
    def __init__(self):
        self.test_results = []
        self.temp_dir = None
        
    async def run_all_tests(self):
        """Executar todos os testes"""
        print("üß™ Iniciando Testes do Processador de DARMs")
        print("=" * 50)
        
        try:
            # Teste 1: Valida√ß√£o de configura√ß√µes
            await self.test_config_validation()
            
            # Teste 2: Cria√ß√£o de diret√≥rios
            await self.test_directory_creation()
            
            # Teste 3: Inicializa√ß√£o do processador
            await self.test_processor_initialization()
            
            # Teste 4: Extra√ß√£o de dados
            await self.test_data_extraction()
            
            # Teste 5: Gera√ß√£o de SQL
            await self.test_sql_generation()
            
            # Teste 6: Processamento completo
            await self.test_complete_processing()
            
            # Mostrar resultados
            self.show_test_results()
            
        except Exception as error:
            print(f"‚ùå Erro durante os testes: {error}")
        finally:
            # Limpar arquivos tempor√°rios
            self.cleanup()
    
    async def test_config_validation(self):
        """Teste de valida√ß√£o de configura√ß√µes"""
        print("\nüîß Teste 1: Valida√ß√£o de Configura√ß√µes")
        
        try:
            errors = validate_config()
            if not errors:
                self.test_results.append(("Valida√ß√£o de Configura√ß√µes", "‚úÖ PASSOU"))
                print("   ‚úÖ Configura√ß√µes v√°lidas")
            else:
                self.test_results.append(("Valida√ß√£o de Configura√ß√µes", "‚ùå FALHOU"))
                print(f"   ‚ùå Erros encontrados: {errors}")
        except Exception as error:
            self.test_results.append(("Valida√ß√£o de Configura√ß√µes", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    async def test_directory_creation(self):
        """Teste de cria√ß√£o de diret√≥rios"""
        print("\nüìÅ Teste 2: Cria√ß√£o de Diret√≥rios")
        
        try:
            # Criar diret√≥rio tempor√°rio para testes
            self.temp_dir = tempfile.mkdtemp()
            test_darms_dir = Path(self.temp_dir) / "darms"
            test_output_dir = Path(self.temp_dir) / "inserts"
            
            # Criar diret√≥rios
            test_darms_dir.mkdir(exist_ok=True)
            test_output_dir.mkdir(exist_ok=True)
            
            # Verificar se foram criados
            if test_darms_dir.exists() and test_output_dir.exists():
                self.test_results.append(("Cria√ß√£o de Diret√≥rios", "‚úÖ PASSOU"))
                print("   ‚úÖ Diret√≥rios criados com sucesso")
            else:
                self.test_results.append(("Cria√ß√£o de Diret√≥rios", "‚ùå FALHOU"))
                print("   ‚ùå Falha na cria√ß√£o dos diret√≥rios")
                
        except Exception as error:
            self.test_results.append(("Cria√ß√£o de Diret√≥rios", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    async def test_processor_initialization(self):
        """Teste de inicializa√ß√£o do processador"""
        print("\nüöÄ Teste 3: Inicializa√ß√£o do Processador")
        
        try:
            processor = DarmProcessor()
            
            # Modificar diret√≥rios para usar os tempor√°rios
            if self.temp_dir:
                processor.darms_dir = Path(self.temp_dir) / "darms"
                processor.output_dir = Path(self.temp_dir) / "inserts"
            
            # Inicializar
            await processor.init()
            
            self.test_results.append(("Inicializa√ß√£o do Processador", "‚úÖ PASSOU"))
            print("   ‚úÖ Processador inicializado com sucesso")
            
        except Exception as error:
            self.test_results.append(("Inicializa√ß√£o do Processador", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    async def test_data_extraction(self):
        """Teste de extra√ß√£o de dados"""
        print("\nüìä Teste 4: Extra√ß√£o de Dados")
        
        try:
            processor = DarmProcessor()
            
            # Texto de exemplo (simulando PDF)
            sample_text = """
            DARM - Documento de Arrecada√ß√£o de Receitas Municipais
            
            02. INSCRI√á√ÉO MUNICIPAL 123456
            01. RECEITA 262-3
            03. DATA VENCIMENTO 15/12/2024
            04. ANO DE REFER√äNCIA 2024
            05. GUIA N√ò
            123456789
            06. VALOR DO TRIBUTO R$ 1.234,56
            09. VALOR TOTAL R$ 1.234,56
            
            C√≥digo de Barras: 123456789012345678901234567890123456789012345678
            """
            
            # Extrair dados
            data = processor.extract_darm_data(sample_text)
            
            if data and data.get('inscricao') and data.get('valorPrincipal'):
                self.test_results.append(("Extra√ß√£o de Dados", "‚úÖ PASSOU"))
                print("   ‚úÖ Dados extra√≠dos com sucesso")
                print(f"      - Inscri√ß√£o: {data.get('inscricao')}")
                print(f"      - Valor: {data.get('valorPrincipal')}")
                print(f"      - Guia: {data.get('numeroGuia')}")
            else:
                self.test_results.append(("Extra√ß√£o de Dados", "‚ùå FALHOU"))
                print("   ‚ùå Falha na extra√ß√£o de dados")
                
        except Exception as error:
            self.test_results.append(("Extra√ß√£o de Dados", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    async def test_sql_generation(self):
        """Teste de gera√ß√£o de SQL"""
        print("\nüíæ Teste 5: Gera√ß√£o de SQL")
        
        try:
            processor = DarmProcessor()
            
            # Dados de exemplo
            sample_data = {
                'inscricao': '123456',
                'numeroGuia': '123456789',
                'valorPrincipal': '1234.56',
                'valorTotal': '1234.56',
                'dataVencimento': '15/12/2024',
                'exercicio': '2024',
                'codigoReceita': '2623',
                'codigoBarras': '123456789012345678901234567890123456789012345678'
            }
            
            # Gerar SQL
            sql = processor.generate_sql_insert(sample_data)
            
            if sql and 'INSERT INTO FarrDarmsPagos' in sql:
                self.test_results.append(("Gera√ß√£o de SQL", "‚úÖ PASSOU"))
                print("   ‚úÖ SQL gerado com sucesso")
                print(f"      - Tamanho: {len(sql)} caracteres")
            else:
                self.test_results.append(("Gera√ß√£o de SQL", "‚ùå FALHOU"))
                print("   ‚ùå Falha na gera√ß√£o do SQL")
                
        except Exception as error:
            self.test_results.append(("Gera√ß√£o de SQL", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    async def test_complete_processing(self):
        """Teste de processamento completo"""
        print("\nüîÑ Teste 6: Processamento Completo")
        
        try:
            processor = DarmProcessor()
            
            # Modificar diret√≥rios para usar os tempor√°rios
            if self.temp_dir:
                processor.darms_dir = Path(self.temp_dir) / "darms"
                processor.output_dir = Path(self.temp_dir) / "inserts"
            
            # Inicializar
            await processor.init()
            
            # Simular processamento (sem PDFs reais)
            processor.guias_processadas = ['123456', '789012']
            processor.all_sql_inserts = [
                "INSERT INTO FarrDarmsPagos (...) VALUES (...);",
                "INSERT INTO FarrDarmsPagos (...) VALUES (...);"
            ]
            
            # Gerar arquivo √∫nico
            await processor.generate_single_sql_file()
            
            # Gerar relat√≥rio
            await processor.generate_report()
            
            # Verificar se os arquivos foram criados
            output_dir = processor.output_dir
            single_file = output_dir / "INSERT_TODOS_DARMs.sql"
            report_file = output_dir / "RELATORIO_PROCESSAMENTO.md"
            
            if single_file.exists() and report_file.exists():
                self.test_results.append(("Processamento Completo", "‚úÖ PASSOU"))
                print("   ‚úÖ Processamento completo realizado com sucesso")
                print(f"      - Arquivo SQL: {single_file.name}")
                print(f"      - Relat√≥rio: {report_file.name}")
            else:
                self.test_results.append(("Processamento Completo", "‚ùå FALHOU"))
                print("   ‚ùå Falha no processamento completo")
                
        except Exception as error:
            self.test_results.append(("Processamento Completo", "‚ùå ERRO"))
            print(f"   ‚ùå Erro: {error}")
    
    def show_test_results(self):
        """Mostrar resultados dos testes"""
        print("\nüìã Resultados dos Testes")
        print("=" * 30)
        
        passed = 0
        failed = 0
        errors = 0
        
        for test_name, result in self.test_results:
            print(f"{result} {test_name}")
            if "‚úÖ PASSOU" in result:
                passed += 1
            elif "‚ùå FALHOU" in result:
                failed += 1
            elif "‚ùå ERRO" in result:
                errors += 1
        
        print(f"\nüìä Resumo:")
        print(f"   ‚úÖ Passou: {passed}")
        print(f"   ‚ùå Falhou: {failed}")
        print(f"   üí• Erro: {errors}")
        print(f"   üìà Total: {len(self.test_results)}")
        
        if failed == 0 and errors == 0:
            print("\nüéâ Todos os testes passaram!")
        else:
            print(f"\n‚ö†Ô∏è  {failed + errors} teste(s) com problema(s)")
    
    def cleanup(self):
        """Limpar arquivos tempor√°rios"""
        if self.temp_dir and os.path.exists(self.temp_dir):
            try:
                shutil.rmtree(self.temp_dir)
                print(f"\nüßπ Arquivos tempor√°rios removidos: {self.temp_dir}")
            except Exception as error:
                print(f"\n‚ö†Ô∏è  Erro ao remover arquivos tempor√°rios: {error}")

def test_messages():
    """Teste das mensagens do sistema"""
    print("\nüí¨ Teste de Mensagens")
    print("=" * 20)
    
    try:
        # Teste mensagem em portugu√™s
        msg_pt = get_message('processing_start', 'pt_BR')
        print(f"   Portugu√™s: {msg_pt}")
        
        # Teste mensagem em ingl√™s
        msg_en = get_message('processing_start', 'en')
        print(f"   Ingl√™s: {msg_en}")
        
        # Teste mensagem padr√£o
        msg_default = get_message('processing_start')
        print(f"   Padr√£o: {msg_default}")
        
        print("   ‚úÖ Mensagens funcionando corretamente")
        
    except Exception as error:
        print(f"   ‚ùå Erro nas mensagens: {error}")

async def main():
    """Fun√ß√£o principal dos testes"""
    print("üß™ Teste do Processador de DARMs - Vers√£o Python")
    print("=" * 60)
    
    # Teste das mensagens
    test_messages()
    
    # Executar testes do processador
    tester = DarmProcessorTester()
    await tester.run_all_tests()
    
    print("\nüìù Pr√≥ximos Passos:")
    print("1. Se todos os testes passaram, o processador est√° funcionando")
    print("2. Coloque arquivos PDF na pasta 'darms/'")
    print("3. Execute: python darm_processor.py")
    print("4. Verifique os resultados na pasta 'inserts/'")

if __name__ == "__main__":
    # Executar testes
    asyncio.run(main()) 