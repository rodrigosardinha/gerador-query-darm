#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar um instalador completo do Processador de DARMs
"""

import os
import shutil
import zipfile
from pathlib import Path
from datetime import datetime

def criar_instalador():
    """Criar instalador completo do Processador de DARMs"""
    
    print("üöÄ Criando Instalador do Processador de DARMs")
    print("=" * 50)
    
    # Diret√≥rios
    base_dir = Path(".")
    dist_dir = base_dir / "dist"
    installer_dir = base_dir / "Instalador"
    
    # Criar diret√≥rio do instalador
    if installer_dir.exists():
        shutil.rmtree(installer_dir)
    installer_dir.mkdir()
    
    # 1. Copiar execut√°vel
    print("üì¶ Copiando execut√°vel...")
    exe_source = dist_dir / "Processador-DARM.exe"
    exe_dest = installer_dir / "Processador-DARM.exe"
    shutil.copy2(exe_source, exe_dest)
    
    # 2. Criar estrutura de diret√≥rios
    print("üìÅ Criando estrutura de diret√≥rios...")
    (installer_dir / "darms").mkdir()
    (installer_dir / "inserts").mkdir()
    
    # 3. Criar arquivo README para o usu√°rio
    print("üìù Criando documenta√ß√£o...")
    readme_content = """# üèõÔ∏è Processador de DARMs - Instalador

## üìã Como Usar

### 1. Executar o Processador
- Execute o arquivo `Processador-DARM.exe`
- O programa ir√° processar automaticamente todos os PDFs na pasta `darms/`

### 2. Preparar os DARMs
- Coloque os arquivos PDF dos DARMs na pasta `darms/`
- Formatos suportados: PDF, PNG, JPG, JPEG, BMP, TIFF, TIF

### 3. Verificar Resultados
- Os arquivos SQL ser√£o gerados na pasta `inserts/`
- Verifique o relat√≥rio `RELATORIO_PROCESSAMENTO.md`

## üìÅ Estrutura de Pastas

```
Processador-DARM/
‚îú‚îÄ‚îÄ Processador-DARM.exe    # Execut√°vel principal
‚îú‚îÄ‚îÄ darms/                  # Coloque seus PDFs aqui
‚îÇ   ‚îî‚îÄ‚îÄ (seus arquivos PDF)
‚îú‚îÄ‚îÄ inserts/                # Arquivos SQL gerados
‚îÇ   ‚îú‚îÄ‚îÄ INSERT_TODOS_DARMs.sql
‚îÇ   ‚îú‚îÄ‚îÄ INSERT_DARM_PAGO_*.sql
‚îÇ   ‚îú‚îÄ‚îÄ CHECK_GUIA_*.sql
‚îÇ   ‚îî‚îÄ‚îÄ RELATORIO_PROCESSAMENTO.md
‚îî‚îÄ‚îÄ README.txt              # Este arquivo
```

## üîß Funcionalidades

- ‚úÖ **Extra√ß√£o autom√°tica** de dados de PDFs
- ‚úÖ **Suporte a OCR** para PDFs com imagens
- ‚úÖ **Gera√ß√£o de SQL** compat√≠vel com Control-M
- ‚úÖ **Corre√ß√£o autom√°tica** de inscri√ß√µes municipais
- ‚úÖ **Relat√≥rios detalhados** do processamento
- ‚úÖ **Controle de duplicatas** autom√°tico

## üö® Solu√ß√£o de Problemas

### Erro: "Nenhum arquivo encontrado"
- Verifique se os PDFs est√£o na pasta `darms/`
- Certifique-se que os arquivos t√™m extens√£o `.pdf`

### Erro: "Dados insuficientes"
- Verifique se o PDF cont√©m dados v√°lidos de DARM
- Tente com um PDF diferente

### Problemas de permiss√£o
- Execute como administrador se necess√°rio
- Verifique se tem permiss√£o de escrita na pasta

## üìû Suporte

Para d√∫vidas ou problemas:
- Verifique este README primeiro
- Consulte o relat√≥rio de processamento
- Entre em contato com o suporte t√©cnico

---
**Vers√£o**: 1.0.0
**Data**: {data_atual}
**Compatibilidade**: Windows 10/11
""".format(data_atual=datetime.now().strftime("%d/%m/%Y"))
    
    with open(installer_dir / "README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    # 4. Criar script de instala√ß√£o para Windows
    print("üíª Criando script de instala√ß√£o...")
    install_bat = """@echo off
echo ========================================
echo  Processador de DARMs - Instalacao
echo ========================================
echo.

echo Criando estrutura de pastas...
if not exist "darms" mkdir "darms"
if not exist "inserts" mkdir "inserts"

echo.
echo Instalacao concluida!
echo.
echo Como usar:
echo 1. Coloque os PDFs dos DARMs na pasta 'darms'
echo 2. Execute 'Processador-DARM.exe'
echo 3. Verifique os resultados na pasta 'inserts'
echo.
echo Pressione qualquer tecla para sair...
pause >nul
"""
    
    with open(installer_dir / "INSTALAR.bat", "w", encoding="utf-8") as f:
        f.write(install_bat)
    
    # 5. Criar arquivo de exemplo
    print("üìÑ Criando arquivo de exemplo...")
    exemplo_content = """# Exemplo de DARM Processado

Este arquivo demonstra como o Processador de DARMs funciona.

## Como testar:

1. Coloque um PDF de DARM na pasta `darms/`
2. Execute `Processador-DARM.exe`
3. Verifique os arquivos SQL gerados na pasta `inserts/`

## Arquivos gerados:

- `INSERT_TODOS_DARMs.sql` - Script √∫nico com todos os registros
- `INSERT_DARM_PAGO_*.sql` - Scripts individuais por guia
- `CHECK_GUIA_*.sql` - Scripts de verifica√ß√£o
- `RELATORIO_PROCESSAMENTO.md` - Relat√≥rio detalhado

## Dados extra√≠dos:

- Inscri√ß√£o Municipal
- N√∫mero da Guia
- C√≥digo de Receita
- Valores (Principal, Total)
- Data de Vencimento
- Exerc√≠cio
- C√≥digo de Barras
- Compet√™ncia

---
Processador de DARMs v1.0.0
"""
    
    with open(installer_dir / "EXEMPLO.txt", "w", encoding="utf-8") as f:
        f.write(exemplo_content)
    
    # 6. Criar arquivo ZIP do instalador
    print("üì¶ Criando arquivo ZIP do instalador...")
    zip_filename = f"Processador-DARM-Instalador-{datetime.now().strftime('%Y%m%d-%H%M%S')}.zip"
    zip_path = base_dir / zip_filename
    
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(installer_dir):
            for file in files:
                file_path = Path(root) / file
                arcname = file_path.relative_to(installer_dir)
                zipf.write(file_path, arcname)
    
    # 7. Mostrar informa√ß√µes do instalador
    print("\n‚úÖ Instalador criado com sucesso!")
    print(f"üìÅ Localiza√ß√£o: {installer_dir}")
    print(f"üì¶ Arquivo ZIP: {zip_filename}")
    print(f"üìä Tamanho do ZIP: {zip_path.stat().st_size / 1024 / 1024:.1f} MB")
    
    print("\nüìã Conte√∫do do instalador:")
    for item in installer_dir.rglob("*"):
        if item.is_file():
            print(f"   - {item.relative_to(installer_dir)}")
    
    print(f"\nüéØ Para distribuir:")
    print(f"   1. Envie o arquivo: {zip_filename}")
    print(f"   2. O usu√°rio deve extrair e executar INSTALAR.bat")
    print(f"   3. Depois executar Processador-DARM.exe")
    
    return zip_filename

if __name__ == "__main__":
    criar_instalador()

