#!/usr/bin/env python3
"""
Exemplo de uso do Gerador de Query DARM com funcionalidades de OCR
"""

import asyncio
import sys
from pathlib import Path

# Adicionar o diret√≥rio atual ao path para importar o m√≥dulo
sys.path.append(str(Path(__file__).parent))

from darm_processor import DarmProcessor

async def exemplo_processamento_ocr():
    """Exemplo de processamento com OCR"""
    print("üñºÔ∏è Exemplo de Processamento com OCR - Gerador de Query DARM")
    print("=" * 70)
    
    # Inicializar o processador
    processor = DarmProcessor()
    await processor.init()
    
    print("üìÅ Verificando arquivos dispon√≠veis...")
    
    # Verificar se h√° arquivos na pasta darms
    darms_dir = processor.darms_dir
    if not darms_dir.exists():
        print("‚ùå Pasta 'darms' n√£o encontrada!")
        return
    
    # Listar todos os arquivos suportados
    supported_extensions = ['.pdf', '.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']
    all_files = [f for f in darms_dir.iterdir() 
                if f.suffix.lower() in supported_extensions]
    
    if not all_files:
        print("üì≠ Nenhum arquivo suportado encontrado na pasta 'darms'")
        print("üí° Adicione alguns arquivos para testar:")
        print("   - PDFs normais (com texto)")
        print("   - PDFs com texto em imagem")
        print("   - Imagens: PNG, JPG, BMP, TIFF")
        return
    
    print(f"üìÅ Encontrados {len(all_files)} arquivos para processamento:")
    
    # Separar arquivos por tipo
    pdf_files = [f for f in all_files if f.suffix.lower() == '.pdf']
    image_files = [f for f in all_files if f.suffix.lower() in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']]
    
    print(f"   üìÑ PDFs: {len(pdf_files)}")
    for pdf in pdf_files:
        print(f"      - {pdf.name}")
    
    print(f"   üñºÔ∏è  Imagens: {len(image_files)}")
    for img in image_files:
        print(f"      - {img.name}")
    
    print("\nüöÄ Iniciando processamento...")
    
    # Processar cada arquivo
    for file_path in all_files:
        file_type = 'pdf' if file_path.suffix.lower() == '.pdf' else 'image'
        print(f"\nüîÑ Processando {file_type.upper()}: {file_path.name}")
        
        try:
            # Extrair texto baseado no tipo
            if file_type == 'pdf':
                text = await processor.extract_text_from_pdf(file_path)
            else:
                text = await processor.extract_text_from_image(file_path)
            
            if text.strip():
                print(f"‚úÖ Texto extra√≠do: {len(text)} caracteres")
                
                # Extrair dados do DARM
                darm_data = processor.extract_darm_data(text)
                
                if darm_data:
                    print("‚úÖ Dados do DARM extra√≠dos:")
                    for key, value in darm_data.items():
                        print(f"   {key}: {value}")
                    
                    # Gerar SQL
                    sql_content = processor.generate_sql_insert(darm_data)
                    if sql_content:
                        print("‚úÖ SQL gerado com sucesso!")
                    else:
                        print("‚ùå Erro ao gerar SQL")
                else:
                    print("‚ùå N√£o foi poss√≠vel extrair dados do DARM")
            else:
                print("‚ùå Nenhum texto extra√≠do")
                
        except Exception as e:
            print(f"‚ùå Erro ao processar {file_path.name}: {e}")
    
    print("\nüéâ Processamento conclu√≠do!")
    print("üìä Verifique a pasta 'inserts' para os arquivos SQL gerados")

async def exemplo_ocr_especifico():
    """Exemplo espec√≠fico de uso de OCR"""
    print("\nüîç Exemplo Espec√≠fico de OCR")
    print("=" * 40)
    
    processor = DarmProcessor()
    await processor.init()
    
    # Verificar se OCR est√° dispon√≠vel
    try:
        import pytesseract
        print("‚úÖ OCR dispon√≠vel")
    except ImportError:
        print("‚ùå OCR n√£o dispon√≠vel")
        print("üì¶ Execute: python install_ocr.py")
        return
    
    # Exemplo de pr√©-processamento de imagem
    try:
        import cv2
        import numpy as np
        
        print("üõ†Ô∏è  Exemplo de pr√©-processamento de imagem...")
        
        # Criar imagem de exemplo
        img = np.ones((200, 400, 3), dtype=np.uint8) * 255
        cv2.putText(img, "DARMs com OCR", (50, 100), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1.5, (0, 0, 0), 3)
        
        # Aplicar pr√©-processamento
        processed = processor.preprocess_image_for_ocr(img)
        print("‚úÖ Pr√©-processamento aplicado")
        
        # Salvar imagem processada
        cv2.imwrite("exemplo_processado.png", processed)
        print("üíæ Imagem processada salva como 'exemplo_processado.png'")
        
    except Exception as e:
        print(f"‚ùå Erro no exemplo: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Exemplo de Uso com OCR - Gerador de Query DARM")
    print("=" * 70)
    
    try:
        # Executar exemplo principal
        asyncio.run(exemplo_processamento_ocr())
        
        # Executar exemplo espec√≠fico de OCR
        asyncio.run(exemplo_ocr_especifico())
        
        print("\nüìã Resumo:")
        print("‚úÖ Exemplo executado com sucesso")
        print("üìÅ Verifique a pasta 'inserts' para os resultados")
        print("üí° Para mais informa√ß√µes, consulte FUNCIONALIDADES_OCR.md")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Exemplo cancelado pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
    
    print("\n" + "=" * 70)
    input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
