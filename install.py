#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Instala√ß√£o R√°pida - Processador de DARMs

Este script automatiza a instala√ß√£o e configura√ß√£o do ambiente
para o processador de DARMs em Python.
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_python_version():
    """Verificar vers√£o do Python"""
    print("üêç Verificando vers√£o do Python...")
    
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print(f"‚ùå Python {version.major}.{version.minor} detectado")
        print("   ‚ö†Ô∏è  √â necess√°rio Python 3.7 ou superior")
        print("   üí° Baixe em: https://www.python.org/downloads/")
        return False
    
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
    return True

def check_pip():
    """Verificar se pip est√° dispon√≠vel"""
    print("\nüì¶ Verificando pip...")
    
    try:
        result = subprocess.run([sys.executable, '-m', 'pip', '--version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ pip est√° dispon√≠vel")
            return True
        else:
            print("‚ùå pip n√£o est√° dispon√≠vel")
            return False
    except Exception:
        print("‚ùå Erro ao verificar pip")
        return False

def install_dependencies():
    """Instalar depend√™ncias"""
    print("\nüì• Instalando depend√™ncias...")
    
    try:
        # Instalar PyPDF2
        print("   üìÑ Instalando PyPDF2...")
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', 'PyPDF2==3.0.1'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ PyPDF2 instalado com sucesso")
        else:
            print(f"   ‚ùå Erro ao instalar PyPDF2: {result.stderr}")
            return False
        
        # Instalar pathlib2 (se necess√°rio)
        print("   üìÅ Instalando pathlib2...")
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', 'pathlib2==2.3.7'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("   ‚úÖ pathlib2 instalado com sucesso")
        else:
            print(f"   ‚ö†Ô∏è  pathlib2 n√£o instalado (pode n√£o ser necess√°rio): {result.stderr}")
        
        print("‚úÖ Todas as depend√™ncias instaladas")
        return True
        
    except Exception as error:
        print(f"‚ùå Erro durante instala√ß√£o: {error}")
        return False

def create_directories():
    """Criar diret√≥rios necess√°rios"""
    print("\nüìÅ Criando diret√≥rios...")
    
    try:
        # Diret√≥rio darms
        darms_dir = Path('darms')
        if not darms_dir.exists():
            darms_dir.mkdir()
            print("   ‚úÖ Diret√≥rio 'darms/' criado")
        else:
            print("   ‚ÑπÔ∏è  Diret√≥rio 'darms/' j√° existe")
        
        # Diret√≥rio inserts
        inserts_dir = Path('inserts')
        if not inserts_dir.exists():
            inserts_dir.mkdir()
            print("   ‚úÖ Diret√≥rio 'inserts/' criado")
        else:
            print("   ‚ÑπÔ∏è  Diret√≥rio 'inserts/' j√° existe")
        
        return True
        
    except Exception as error:
        print(f"‚ùå Erro ao criar diret√≥rios: {error}")
        return False

def create_sample_files():
    """Criar arquivos de exemplo"""
    print("\nüìù Criando arquivos de exemplo...")
    
    try:
        # Arquivo .gitignore
        gitignore_content = """# Arquivos tempor√°rios
*.tmp
*.temp

# Arquivos de log
*.log

# Arquivos de backup
*.bak
*.backup

# Diret√≥rios de sa√≠da (opcional)
# inserts/

# Arquivos PDF (opcional)
# darms/*.pdf
"""
        
        gitignore_path = Path('.gitignore')
        if not gitignore_path.exists():
            with open(gitignore_path, 'w', encoding='utf-8') as f:
                f.write(gitignore_content)
            print("   ‚úÖ Arquivo .gitignore criado")
        
        # Arquivo README.md principal
        readme_content = """# Processador de DARMs - Vers√£o Python

Este projeto processa arquivos PDF de DARMs (Documento de Arrecada√ß√£o de Receitas Municipais) 
e gera scripts SQL para inser√ß√£o no banco de dados.

## üöÄ In√≠cio R√°pido

1. **Instalar depend√™ncias:**
   ```bash
   pip install -r requirements.txt
   ```

2. **Colocar PDFs na pasta `darms/`**

3. **Executar o processador:**
   ```bash
   python darm_processor.py
   ```

4. **Verificar resultados na pasta `inserts/`**

## üìö Documenta√ß√£o

- [README_Python.md](README_Python.md) - Documenta√ß√£o completa
- [config.py](config.py) - Configura√ß√µes do sistema
- [exemplo_uso.py](exemplo_uso.py) - Exemplos de uso
- [test_darm_processor.py](test_darm_processor.py) - Testes do sistema

## üîß Testes

Execute os testes para verificar se tudo est√° funcionando:

```bash
python test_darm_processor.py
```

## üìÅ Estrutura

```
gera-query-pagar-darm/
‚îú‚îÄ‚îÄ darms/                    # PDFs dos DARMs
‚îú‚îÄ‚îÄ inserts/                  # Arquivos SQL gerados
‚îú‚îÄ‚îÄ darm_processor.py         # Script principal
‚îú‚îÄ‚îÄ config.py                 # Configura√ß√µes
‚îú‚îÄ‚îÄ requirements.txt          # Depend√™ncias
‚îú‚îÄ‚îÄ README_Python.md          # Documenta√ß√£o
‚îú‚îÄ‚îÄ exemplo_uso.py            # Exemplos
‚îú‚îÄ‚îÄ test_darm_processor.py    # Testes
‚îî‚îÄ‚îÄ install.py                # Instala√ß√£o
```

## üÜö Compara√ß√£o com JavaScript

Esta vers√£o Python mant√©m todas as funcionalidades da vers√£o JavaScript original,
com melhorias em:

- ‚úÖ Melhor tratamento de PDFs
- ‚úÖ C√≥digo mais limpo e leg√≠vel
- ‚úÖ Melhor tratamento de erros
- ‚úÖ Configura√ß√µes centralizadas
- ‚úÖ Testes automatizados
- ‚úÖ Documenta√ß√£o completa

---
**Desenvolvido em Python** - Compat√≠vel com a vers√£o JavaScript original
"""
        
        readme_path = Path('README.md')
        if not readme_path.exists():
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            print("   ‚úÖ Arquivo README.md criado")
        
        return True
        
    except Exception as error:
        print(f"‚ùå Erro ao criar arquivos de exemplo: {error}")
        return False

def run_tests():
    """Executar testes b√°sicos"""
    print("\nüß™ Executando testes b√°sicos...")
    
    try:
        # Teste de importa√ß√£o
        print("   üîç Testando importa√ß√µes...")
        
        import asyncio
        print("   ‚úÖ asyncio importado")
        
        import re
        print("   ‚úÖ re importado")
        
        from datetime import datetime
        print("   ‚úÖ datetime importado")
        
        from pathlib import Path
        print("   ‚úÖ pathlib importado")
        
        # Tentar importar PyPDF2
        try:
            import PyPDF2
            print("   ‚úÖ PyPDF2 importado")
        except ImportError:
            print("   ‚ùå PyPDF2 n√£o encontrado")
            return False
        
        # Teste de configura√ß√£o
        try:
            from config import validate_config
            errors = validate_config()
            if not errors:
                print("   ‚úÖ Configura√ß√µes v√°lidas")
            else:
                print(f"   ‚ö†Ô∏è  Configura√ß√µes com avisos: {errors}")
        except Exception as error:
            print(f"   ‚ùå Erro nas configura√ß√µes: {error}")
            return False
        
        print("‚úÖ Testes b√°sicos passaram")
        return True
        
    except Exception as error:
        print(f"‚ùå Erro durante testes: {error}")
        return False

def show_next_steps():
    """Mostrar pr√≥ximos passos"""
    print("\nüéØ Pr√≥ximos Passos")
    print("=" * 20)
    print("1. üìÅ Coloque arquivos PDF na pasta 'darms/'")
    print("2. üöÄ Execute: python darm_processor.py")
    print("3. üìä Verifique os resultados na pasta 'inserts/'")
    print("4. üß™ Execute testes: python test_darm_processor.py")
    print("5. üìö Leia a documenta√ß√£o: README_Python.md")
    print()
    print("üí° Dicas:")
    print("   - Use 'python exemplo_uso.py' para ver exemplos")
    print("   - Configure par√¢metros em 'config.py'")
    print("   - Verifique logs no console durante execu√ß√£o")

def main():
    """Fun√ß√£o principal de instala√ß√£o"""
    print("üöÄ Instala√ß√£o do Processador de DARMs - Vers√£o Python")
    print("=" * 60)
    
    # Verificar Python
    if not check_python_version():
        return False
    
    # Verificar pip
    if not check_pip():
        print("\n‚ùå pip n√£o est√° dispon√≠vel")
        print("üí° Instale pip: https://pip.pypa.io/en/stable/installation/")
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias")
        return False
    
    # Criar diret√≥rios
    if not create_directories():
        print("\n‚ùå Falha na cria√ß√£o dos diret√≥rios")
        return False
    
    # Criar arquivos de exemplo
    if not create_sample_files():
        print("\n‚ùå Falha na cria√ß√£o dos arquivos de exemplo")
        return False
    
    # Executar testes
    if not run_tests():
        print("\n‚ùå Falha nos testes b√°sicos")
        return False
    
    print("\nüéâ Instala√ß√£o conclu√≠da com sucesso!")
    show_next_steps()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå Instala√ß√£o falhou. Verifique os erros acima.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Instala√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as error:
        print(f"\n‚ùå Erro inesperado: {error}")
        sys.exit(1) 