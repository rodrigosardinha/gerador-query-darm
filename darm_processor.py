import os
import re
import json
from datetime import datetime
from pathlib import Path
import PyPDF2
import io
import sys

# Novas importa√ß√µes para OCR e processamento de imagens
try:
    import pytesseract
    from PIL import Image
    import cv2
    import numpy as np
    from pdf2image import convert_from_path
    OCR_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Aviso: Algumas depend√™ncias de OCR n√£o est√£o instaladas: {e}")
    print("üì¶ Para instalar: pip install pytesseract Pillow pdf2image opencv-python")
    OCR_AVAILABLE = False

__version__ = "1.0.0"

class DarmProcessor:
    def __init__(self):
        # Determinar o diret√≥rio base (funciona tanto para script quanto para execut√°vel)
        if getattr(sys, 'frozen', False):
            # Executando como execut√°vel PyInstaller
            base_dir = Path(sys._MEIPASS)
            # Para execut√°vel, usar diret√≥rio onde o .exe est√° localizado
            self.base_dir = Path(sys.executable).parent
        else:
            # Executando como script Python
            self.base_dir = Path(__file__).parent
        
        self.darms_dir = self.base_dir / 'darms'
        self.output_dir = self.base_dir / 'inserts'
        self.processed_guias = set()  # Para controlar guias j√° processadas
        self.guias_processadas = []  # Lista para rastrear guias processadas
        self.all_sql_inserts = []  # Array para armazenar todos os INSERTs

    async def init(self):
        """Inicializar o processador"""
        # Criar diret√≥rios se n√£o existirem
        self.darms_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
        
        print(f"üìÅ Diret√≥rio base: {self.base_dir}")
        print(f"üìÅ Diret√≥rio DARMs: {self.darms_dir}")
        print(f"üìÅ Diret√≥rio sa√≠da: {self.output_dir}")
        
        # Carregar guias j√° processadas de arquivos existentes
        await self.load_processed_guias()

    async def load_processed_guias(self):
        """Carregar guias j√° processadas de arquivos existentes"""
        try:
            # N√£o carregar guias processadas para permitir reprocessamento completo
            # As guias ser√£o processadas novamente a cada execu√ß√£o
            print("üîÑ Modo de reprocessamento ativado - todos os arquivos ser√£o sobrescritos")
        except Exception as error:
            print(f'Erro ao carregar guias processadas: {error}')

    async def check_guia_exists(self, numero_guia):
        """Verificar se a guia j√° existe no banco de dados"""
        try:
            # Gerar SQL para verificar se a guia j√° existe no formato simplificado para Control-M
            check_sql = f"""use silfae;
SELECT COUNT(*) as total FROM FarrDarmsPagos WHERE NR_GUIA = {numero_guia} AND AA_EXERCICIO = 2025 AND CD_BANCO = 70 AND NR_BDA = 37 AND NR_COMPLEMENTO = 0 AND NR_LOTE_NSA = 730 AND TP_LOTE_D = 1;"""

            check_filename = f'CHECK_GUIA_{numero_guia}.sql'
            check_path = self.output_dir / check_filename
            
            # Escrever arquivo em encoding latin1
            with open(check_path, 'w', encoding='latin1') as f:
                f.write(check_sql)
            
            print(f'Arquivo de verifica√ß√£o criado: {check_filename}')
            print(f'IMPORTANTE: Execute {check_filename} para verificar se a guia {numero_guia} j√° existe no banco')
            
            return False  # Assumir que n√£o existe por seguran√ßa
        except Exception as error:
            print(f'Erro ao verificar guia {numero_guia}: {error}')
            return False

    async def generate_single_sql_file(self):
        """Gerar arquivo SQL √∫nico com todos os INSERTs no formato simplificado para Control-M"""
        try:
            if not self.all_sql_inserts:
                print('üì≠ Nenhum INSERT para gerar no arquivo √∫nico.')
                return

            # Filtrar apenas INSERTs v√°lidos
            valid_inserts = []
            for sql_insert in self.all_sql_inserts:
                if sql_insert and len(sql_insert.strip()) > 50:
                    valid_inserts.append(sql_insert)

            if not valid_inserts:
                print('üì≠ Nenhum INSERT v√°lido encontrado para gerar o arquivo √∫nico.')
                return

            # Gerar SQ_DOC √∫nicos no Python
            timestamp = int(datetime.now().timestamp() * 1000)
            simple_insert_statements = []
            
            for index, sql_insert in enumerate(valid_inserts):
                # Extrair apenas a parte VALUES do INSERT
                values_match = re.search(r'VALUES\s*\(\s*(.+?)\s*\);', sql_insert, re.DOTALL)
                if values_match:
                    values_part = values_match.group(1)
                    # Split dos valores considerando v√≠rgulas
                    # Aten√ß√£o: isso s√≥ funciona porque todos os campos s√£o simples (sem v√≠rgula interna)
                    valores = [v.strip() for v in values_part.split(',')]
                    # O campo SQ_DOC √© o 8¬∫ campo (√≠ndice 7)
                    if index < len(self.guias_processadas):
                        guia = self.guias_processadas[index]
                        guia_last3 = int(guia) % 1000
                        timestamp_last3 = timestamp % 1000
                        sq_doc = (guia_last3 * 1000) + timestamp_last3 + index
                        valores[7] = str(sq_doc)
                        simple_insert_statements.append(f"({', '.join(valores)})")

            if not simple_insert_statements:
                print('üì≠ Nenhum statement v√°lido para gerar o arquivo √∫nico.')
                return

            # Formato formatado bonito para o arquivo consolidado
            single_sql_content = f"""use silfae;

INSERT INTO FarrDarmsPagos (
    id, AA_EXERCICIO, CD_BANCO, NR_BDA, NR_COMPLEMENTO, NR_LOTE_NSA, TP_LOTE_D, SQ_DOC,
    CD_RECEITA, CD_USU_ALT, CD_USU_INCL, DT_ALT, DT_INCL, DT_VENCTO, DT_PAGTO,
    NR_INSCRICAO, NR_GUIA, NR_COMPETENCIA, NR_CODIGO_BARRAS, NR_LOTE_IPTU, ST_DOC_D, TP_IMPOSTO,
    VL_PAGO, VL_RECEITA, VL_PRINCIPAL, VL_MORA, VL_MULTA, VL_MULTAF_TCDL, VL_MULTAP_TSD, VL_INSU_TIP, VL_JUROS,
    processado, criticaProcessamento
) VALUES 
    {',\n    '.join(simple_insert_statements)};"""

            # Validar se o conte√∫do foi gerado corretamente
            if not single_sql_content or len(single_sql_content.strip()) < 100:
                print('‚ùå Erro: Conte√∫do SQL √∫nico est√° vazio ou muito pequeno')
                return

            single_sql_path = self.output_dir / 'INSERT_TODOS_DARMs.sql'
            
            # Escrever arquivo em encoding latin1
            with open(single_sql_path, 'w', encoding='latin1') as f:
                f.write(single_sql_content)
            
            print('üìÑ Arquivo SQL √∫nico gerado: INSERT_TODOS_DARMs.sql')
            print(f'üìä Cont√©m {len(simple_insert_statements)} INSERT statements')
            print('üîß Formato: ISO 8859-1 (Latin-1) - Compat√≠vel com Control-M')
            print('‚ú® Vers√£o: Formatada bonita - Leg√≠vel e organizada')
            
            # Mostrar SQ_DOC gerados
            sq_docs_info = []
            for i, guia in enumerate(self.guias_processadas[:len(simple_insert_statements)]):
                guia_last3 = int(guia) % 1000
                timestamp_last3 = timestamp % 1000
                sq_doc = (guia_last3 * 1000) + timestamp_last3 + i
                sq_docs_info.append(f'Guia {guia} = {sq_doc}')
            print(f'üî¢ SQ_DOC gerados: {", ".join(sq_docs_info)}')
            
        except Exception as error:
            print(f'‚ùå Erro ao gerar arquivo SQL √∫nico: {error}')

    async def generate_report(self):
        """Gerar relat√≥rio de processamento"""
        try:
            report_content = f"""# RELAT√ìRIO DE PROCESSAMENTO DE DARMs

## Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

## Guias Processadas: {len(self.guias_processadas)}

### Lista de Guias:
{chr(10).join(f'{i + 1}. Guia {guia}' for i, guia in enumerate(self.guias_processadas))}

### Estat√≠sticas:
- Total de guias processadas: {len(self.guias_processadas)}
- Guias √∫nicas: {len(set(self.guias_processadas))}
- Arquivos SQL individuais gerados: {len(self.guias_processadas)}
- Arquivo SQL √∫nico gerado: 1
- Arquivo SQL alternativo gerado: 1

### Arquivos Gerados:
- **INSERT_TODOS_DARMs.sql** - Script √∫nico com INSERT IGNORE (prote√ß√£o autom√°tica contra duplicatas)
- **INSERT_DARM_PAGO_*.sql** - Arquivos individuais para cada guia
- **CHECK_GUIA_*.sql** - Arquivos de verifica√ß√£o para cada guia
- **RELATORIO_PROCESSAMENTO.md** - Este relat√≥rio

### Compatibilidade Control-M:
- ‚úÖ **Formato ISO 8859-1 (Latin-1)** - Compat√≠vel com Control-M
- ‚úÖ **Formato simplificado (uma linha)** - Otimizado para Control-M
- ‚úÖ **Sem coment√°rios** - Arquivos SQL limpos
- ‚úÖ **Caracteres especiais removidos** - Acentos e s√≠mbolos convertidos
- ‚úÖ **Estrutura simplificada** - Otimizada para automa√ß√£o

### Funcionalidades OCR:
- ‚úÖ **PDFs com texto em imagem** - Processamento autom√°tico com OCR
- ‚úÖ **Arquivos de imagem** - Suporte a PNG, JPG, BMP, TIFF
- ‚úÖ **Detec√ß√£o autom√°tica** - Identifica se PDF precisa de OCR
- ‚úÖ **Pr√©-processamento de imagem** - Melhora qualidade do OCR
- ‚úÖ **M√∫ltiplos idiomas** - Suporte ao portugu√™s brasileiro

### Verifica√ß√µes de Seguran√ßa:
- ‚úÖ Controle de duplicatas por sess√£o
- ‚úÖ Verifica√ß√£o de arquivos SQL existentes
- ‚úÖ Gera√ß√£o de arquivos de verifica√ß√£o para cada guia
- ‚úÖ SQ_DOC √∫nico baseado em guia + timestamp
- ‚úÖ Script √∫nico com transa√ß√£o para consist√™ncia
- ‚úÖ INSERT IGNORE (prote√ß√£o autom√°tica contra duplicatas)

### Pr√≥ximos Passos:
1. **Op√ß√£o 1 (Recomendada)**: Execute o arquivo **INSERT_TODOS_DARMs.sql** para inserir todos os registros de uma vez
2. **Op√ß√£o 2**: Execute os arquivos CHECK_GUIA_*.sql para verificar se as guias j√° existem no banco
3. **Op√ß√£o 3**: Execute os arquivos INSERT_DARM_PAGO_*.sql individualmente se preferir

### Vantagens do Script √önico:
- ‚úÖ Execu√ß√£o em transa√ß√£o (consist√™ncia)
- ‚úÖ Verifica√ß√µes autom√°ticas antes e depois
- ‚úÖ Relat√≥rio detalhado de inser√ß√µes
- ‚úÖ Rollback autom√°tico em caso de erro
- ‚úÖ Mais r√°pido e seguro
- ‚úÖ **INSERT IGNORE** - Prote√ß√£o autom√°tica contra duplicatas de NR_GUIA
- ‚úÖ **Compat√≠vel com Control-M** - Formato ISO 8859-1 sem coment√°rios

---
Gerado automaticamente pelo DarmProcessor (Python)
"""

            report_path = self.output_dir / 'RELATORIO_PROCESSAMENTO.md'
            with open(report_path, 'w', encoding='utf8') as f:
                f.write(report_content)
            print('üìã Relat√≥rio gerado: RELATORIO_PROCESSAMENTO.md')
            
        except Exception as error:
            print(f'Erro ao gerar relat√≥rio: {error}')

    async def verify_sql_files(self):
        """Verificar se os arquivos SQL foram gerados corretamente"""
        try:
            print('\nüîç Verificando arquivos SQL gerados...')
            
            # Verificar arquivo √∫nico
            single_sql_path = self.output_dir / 'INSERT_TODOS_DARMs.sql'
            if single_sql_path.exists():
                with open(single_sql_path, 'r', encoding='latin1') as f:
                    content = f.read()
                    if content and len(content.strip()) > 100:
                        print(f'‚úÖ Arquivo √∫nico v√°lido: {single_sql_path.name} ({len(content)} caracteres)')
                    else:
                        print(f'‚ùå Arquivo √∫nico vazio ou inv√°lido: {single_sql_path.name}')
            else:
                print(f'‚ùå Arquivo √∫nico n√£o encontrado: {single_sql_path.name}')
            
            # Verificar arquivos individuais
            individual_files = list(self.output_dir.glob('INSERT_DARM_PAGO_*.sql'))
            valid_files = 0
            for file_path in individual_files:
                try:
                    with open(file_path, 'r', encoding='latin1') as f:
                        content = f.read()
                        if content and len(content.strip()) > 50:
                            valid_files += 1
                        else:
                            print(f'‚ùå Arquivo individual vazio: {file_path.name}')
                except Exception as e:
                    print(f'‚ùå Erro ao ler arquivo {file_path.name}: {e}')
            
            print(f'üìä Arquivos individuais v√°lidos: {valid_files}/{len(individual_files)}')
            
            # Verificar arquivos de verifica√ß√£o
            check_files = list(self.output_dir.glob('CHECK_GUIA_*.sql'))
            print(f'üìä Arquivos de verifica√ß√£o gerados: {len(check_files)}')
            
        except Exception as error:
            print(f'‚ùå Erro ao verificar arquivos SQL: {error}')

    async def process_darms(self):
        """Processar todos os DARMs (PDFs e imagens)"""
        try:
            print('üöÄ Iniciando processamento dos DARMs...')
            
            # Verificar se o diret√≥rio darms existe
            if not self.darms_dir.exists():
                print('‚ùå Diret√≥rio darms n√£o encontrado!')
                return

            # Listar todos os arquivos suportados no diret√≥rio darms
            supported_extensions = ['.pdf', '.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']
            all_files = [f for f in self.darms_dir.iterdir() 
                        if f.suffix.lower() in supported_extensions]

            if not all_files:
                print('üì≠ Nenhum arquivo suportado encontrado no diret√≥rio darms.')
                print(f'üìã Formatos suportados: {", ".join(supported_extensions)}')
                return

            print(f'üìÅ Encontrados {len(all_files)} arquivos para processar.')
            
            # Separar arquivos por tipo
            pdf_files = [f for f in all_files if f.suffix.lower() == '.pdf']
            image_files = [f for f in all_files if f.suffix.lower() in ['.png', '.jpg', '.jpeg', '.bmp', '.tiff', '.tif']]
            
            print(f'üìÑ PDFs encontrados: {len(pdf_files)}')
            print(f'üñºÔ∏è  Imagens encontradas: {len(image_files)}')

            # Processar cada arquivo PDF
            for pdf_file in pdf_files:
                await self.process_file(pdf_file, 'pdf')

            # Processar cada arquivo de imagem
            for image_file in image_files:
                await self.process_file(image_file, 'image')

            # Verificar arquivos SQL gerados
            await self.verify_sql_files()

            # Gerar relat√≥rio final
            await self.generate_report()
            
            # Gerar arquivo SQL √∫nico
            await self.generate_single_sql_file()

            print('‚úÖ Processamento conclu√≠do!')
            print(f'üìä Total de guias processadas: {len(self.guias_processadas)}')

        except Exception as error:
            print(f'‚ùå Erro durante o processamento: {error}')

    async def process_file(self, filepath, file_type):
        """Processar um arquivo espec√≠fico (PDF ou imagem)"""
        try:
            print(f'üîÑ Processando {file_type.upper()}: {filepath.name}')
            
            # Extrair texto baseado no tipo de arquivo
            if file_type == 'pdf':
                text = await self.extract_text_from_pdf(filepath)
            elif file_type == 'image':
                text = await self.extract_text_from_image(filepath)
            else:
                print(f'‚ùå Tipo de arquivo n√£o suportado: {file_type}')
                return
            
            # Debug: mostrar primeiras linhas do texto extra√≠do
            print('=== TEXTO EXTRA√çDO ===')
            print(text[:500] + '...' if len(text) > 500 else text)
            print('==============================')

            # Extrair dados do DARM
            darm_data = self.extract_darm_data(text)
            
            if darm_data:
                print('‚úÖ Dados extra√≠dos:', darm_data)
                
                # Verificar se a guia j√° foi processada nesta sess√£o
                if darm_data['numeroGuia'] in self.processed_guias:
                    print(f'üîÑ Reprocessando guia {darm_data["numeroGuia"]} (j√° processada nesta sess√£o)')
                
                # Verificar se j√° existe um arquivo SQL para esta guia
                numero_guia = darm_data.get('numeroGuia', 'SEM_GUIA')
                sql_filename = f'INSERT_DARM_PAGO_{numero_guia}.sql'
                sql_path = self.output_dir / sql_filename
                
                # Sempre sobrescrever arquivos existentes
                if sql_path.exists():
                    print(f'üîÑ Sobrescrevendo arquivo existente para guia {numero_guia}')
                
                # Verificar se a guia j√° existe no banco de dados
                await self.check_guia_exists(darm_data['numeroGuia'])
                
                # Adicionar guia ao controle de processadas
                self.processed_guias.add(darm_data['numeroGuia'])
                self.guias_processadas.append(darm_data['numeroGuia'])
                
                sql_content = self.generate_sql_insert(darm_data)
                
                # Verificar se o SQL foi gerado corretamente
                if sql_content and len(sql_content.strip()) > 50:
                    # Escrever arquivo em encoding latin1
                    with open(sql_path, 'w', encoding='latin1') as f:
                        f.write(sql_content)
                    
                    # Armazenar o INSERT para o arquivo √∫nico
                    self.all_sql_inserts.append(sql_content)
                    
                    print(f'‚úÖ Arquivo SQL gerado: {sql_filename}')
                    print(f'üìä Guias processadas at√© agora: {len(self.guias_processadas)}')
                else:
                    print(f'‚ùå Erro: SQL n√£o foi gerado corretamente para guia {numero_guia}')
                    # Remover a guia da lista de processadas se o SQL falhou
                    if darm_data['numeroGuia'] in self.processed_guias:
                        self.processed_guias.remove(darm_data['numeroGuia'])
                    if darm_data['numeroGuia'] in self.guias_processadas:
                        self.guias_processadas.remove(darm_data['numeroGuia'])
            else:
                print(f'‚ùå N√£o foi poss√≠vel extrair dados do arquivo: {filepath.name}')

        except Exception as error:
            print(f'‚ùå Erro ao processar {filepath.name}: {error}')

    async def extract_text_from_pdf(self, filepath):
        """Extrair texto de um arquivo PDF - com suporte a OCR para imagens"""
        try:
            # Primeiro, tentar extrair texto normalmente
            with open(filepath, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                text = ""
                for page in pdf_reader.pages:
                    page_text = page.extract_text()
                    text += page_text
                
                # Se conseguiu extrair texto, retornar
                if text.strip():
                    print(f"‚úÖ Texto extra√≠do normalmente do PDF: {filepath.name}")
                    return text
                
                # Se n√£o conseguiu extrair texto, pode ser PDF com imagens
                print(f"‚ö†Ô∏è  PDF sem texto extra√≠vel detectado: {filepath.name}")
                print("üîÑ Tentando extrair texto usando OCR...")
                
                if not OCR_AVAILABLE:
                    print("‚ùå OCR n√£o dispon√≠vel. Instale as depend√™ncias: pip install pytesseract Pillow pdf2image opencv-python")
                    return ""
                
                # Converter PDF para imagens e usar OCR
                return await self.extract_text_from_pdf_with_ocr(filepath)
                
        except Exception as error:
            print(f'Erro ao extrair texto do PDF {filepath.name}: {error}')
            return ""

    async def extract_text_from_pdf_with_ocr(self, filepath):
        """Extrair texto de PDF usando OCR (para PDFs com imagens)"""
        try:
            print(f"üîç Convertendo PDF para imagens: {filepath.name}")
            
            # Converter PDF para imagens
            images = convert_from_path(filepath, dpi=300)
            
            all_text = ""
            for i, image in enumerate(images):
                print(f"üìÑ Processando p√°gina {i+1}/{len(images)} com OCR...")
                
                # Converter PIL Image para OpenCV format
                opencv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
                
                # Pr√©-processar imagem para melhorar OCR
                processed_image = self.preprocess_image_for_ocr(opencv_image)
                
                # Extrair texto usando Tesseract
                page_text = pytesseract.image_to_string(processed_image, lang='por')
                all_text += page_text + "\n"
                
                print(f"‚úÖ P√°gina {i+1} processada com OCR")
            
            if all_text.strip():
                print(f"‚úÖ Texto extra√≠do com OCR: {len(all_text)} caracteres")
                return all_text
            else:
                print("‚ùå Nenhum texto encontrado com OCR")
                return ""
                
        except Exception as error:
            print(f"‚ùå Erro ao extrair texto com OCR: {error}")
            return ""

    def preprocess_image_for_ocr(self, image):
        """Pr√©-processar imagem para melhorar a qualidade do OCR"""
        try:
            # Converter para escala de cinza
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # Aplicar threshold adaptativo para melhorar contraste
            thresh = cv2.adaptiveThreshold(
                gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2
            )
            
            # Aplicar morfologia para remover ru√≠do
            kernel = np.ones((1, 1), np.uint8)
            processed = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
            
            # Aplicar blur suave para suavizar
            processed = cv2.GaussianBlur(processed, (1, 1), 0)
            
            return processed
            
        except Exception as error:
            print(f"‚ö†Ô∏è  Erro no pr√©-processamento da imagem: {error}")
            return image

    async def extract_text_from_image(self, filepath):
        """Extrair texto de arquivo de imagem usando OCR"""
        try:
            if not OCR_AVAILABLE:
                print("‚ùå OCR n√£o dispon√≠vel. Instale as depend√™ncias: pip install pytesseract Pillow opencv-python")
                return ""
            
            print(f"üîç Processando imagem com OCR: {filepath.name}")
            
            # Carregar imagem
            image = cv2.imread(str(filepath))
            if image is None:
                print(f"‚ùå N√£o foi poss√≠vel carregar a imagem: {filepath.name}")
                return ""
            
            # Pr√©-processar imagem
            processed_image = self.preprocess_image_for_ocr(image)
            
            # Extrair texto usando Tesseract
            text = pytesseract.image_to_string(processed_image, lang='por')
            
            if text.strip():
                print(f"‚úÖ Texto extra√≠do da imagem: {len(text)} caracteres")
                return text
            else:
                print("‚ùå Nenhum texto encontrado na imagem")
                return ""
                
        except Exception as error:
            print(f"‚ùå Erro ao extrair texto da imagem: {error}")
            return ""

    def extract_darm_data(self, text):
        """Extrair dados do DARM do texto extra√≠do"""
        try:
            # Padr√µes para extrair dados do DARM - vers√£o melhorada
            patterns = {
                # N√∫mero de inscri√ß√£o - m√∫ltiplos padr√µes
                'inscricao': [
                    r'02\.\s*INSCRI√á√ÉO MUNICIPAL\s*(\d{8,9})',  # 8 ou 9 d√≠gitos
                    r'(?:Inscri√ß√£o|INSCRI√á√ÉO|Inscri√ß√£o Municipal|Inscri√ß√£o)\s*:?\s*(\d{8,9})',  # 8 ou 9 d√≠gitos
                    r'(?:Inscri√ß√£o|INSCRI√á√ÉO)\s*(\d{8,9})',  # 8 ou 9 d√≠gitos
                    r'Insc\.?\s*:?\s*(\d{8,9})'  # 8 ou 9 d√≠gitos
                ],
                
                # C√≥digo de barras - padr√£o espec√≠fico para c√≥digo de barras
                'codigoBarras': [
                    r'(?:C√≥digo de Barras|CODIGO DE BARRAS)\s*:?\s*([\d\.\s]+)',
                    r'(?:Barras|BARRAS)\s*:?\s*([\d\.\s]+)',
                    r'([\d]{48})',  # Exatamente 48 d√≠gitos
                    r'([\d]{44,50})'  # Entre 44 e 50 d√≠gitos
                ],
                
                # C√≥digo de receita - extrair do campo RECEITA
                'codigoReceita': [
                    r'01\.\s*RECEITA\s*\n(\d{1,4})-(\d{1,2})',  # Formato espec√≠fico do PDF
                    r'01\.\s*RECEITA\s*(\d{1,4})-(\d{1,2})',  # Formato alternativo
                    r'(?:RECEITA|Receita|C√≥digo de Receita)\s*:?\s*(\d{1,4}-\d{1,2})',  # Formato gen√©rico
                    r'(\d{1,4})-(\d{1,2})',  # Para formato como "258-5"
                    r'RECEITA\s*\n(\d{1,4})-(\d{1,2})'  # Formato mais espec√≠fico
                ],
                
                # Valor principal - m√∫ltiplos padr√µes
                'valorPrincipal': [
                    r'(?:Valor Principal|VALOR PRINCIPAL|Valor principal)\s*:?\s*R?\$?\s*([\d,\.]+)',
                    r'(?:Principal|PRINCIPAL)\s*:?\s*R?\$?\s*([\d,\.]+)',
                    r'R?\$?\s*([\d,\.]+)\s*(?:Principal|PRINCIPAL)',
                    r'06\.\s*VALOR DO TRIBUTO\s*R?\$?\s*([\d,\.]+)'
                ],
                
                # Valor total - m√∫ltiplos padr√µes
                'valorTotal': [
                    r'(?:Valor Total|VALOR TOTAL|Valor total)\s*:?\s*R?\$?\s*([\d,\.]+)',
                    r'(?:Total|TOTAL)\s*:?\s*R?\$?\s*([\d,\.]+)',
                    r'R?\$?\s*([\d,\.]+)\s*(?:Total|TOTAL)',
                    r'09\.\s*VALOR TOTAL\s*R?\$?\s*([\d,\.]+)'
                ],
                
                # Data de vencimento - m√∫ltiplos padr√µes
                'dataVencimento': [
                    r'(?:Vencimento|VENCIMENTO|Venc\.?)\s*:?\s*(\d{2}/\d{2}/\d{4})',
                    r'(\d{2}/\d{2}/\d{4})\s*(?:Vencimento|VENCIMENTO)',
                    r'03\.\s*DATA VENCIMENTO\s*(\d{2}/\d{2}/\d{4})'
                ],
                
                # Exerc√≠cio - m√∫ltiplos padr√µes
                'exercicio': [
                    r'(?:Exerc√≠cio|EXERC√çCIO|Exerc\.?)\s*:?\s*(\d{4})',
                    r'(\d{4})\s*(?:Exerc√≠cio|EXERC√çCIO)',
                    r'04\.\s*ANO DE REFER√äNCIA\s*(\d{4})'
                ],
                
                # N√∫mero da guia - m√∫ltiplos padr√µes
                'numeroGuia': [
                    r'05\.\s*GUIA N√ò\s*\n?([0-9]+)',  # Pega a linha ap√≥s o t√≠tulo
                    r'(?:Guia|GUIA|N√∫mero da Guia|N¬∫ Guia)\s*:?\s*(\d+)',
                    r'(?:Guia|GUIA)\s*(\d+)',
                    r'Guia\.?\s*:?\s*(\d+)'
                ],
                
                # Compet√™ncia - m√∫ltiplos padr√µes
                'competencia': [
                    r'(?:Compet√™ncia|COMPET√äNCIA|Comp\.?)\s*:?\s*(\d{2}/\d{4})',
                    r'(\d{2}/\d{4})\s*(?:Compet√™ncia|COMPET√äNCIA)'
                ]
            }

            data = {}

            # Extrair cada campo usando m√∫ltiplos padr√µes
            for key, pattern_array in patterns.items():
                for pattern in pattern_array:
                    match = re.search(pattern, text, re.IGNORECASE)
                    if match:
                        # Tratamento especial para c√≥digo de receita no formato "XXX-X"
                        if key == 'codigoReceita' and len(match.groups()) > 1:
                            data[key] = match.group(1) + match.group(2)  # Concatenar sem h√≠fen
                            print(f'üîß C√≥digo de receita extra√≠do (concatena√ß√£o): {data[key]}')
                        elif key == 'codigoReceita' and '-' in match.group(1):
                            # Manter o formato original com h√≠fen
                            data[key] = match.group(1)
                            print(f'üîß C√≥digo de receita extra√≠do (com h√≠fen): {data[key]}')
                        elif key == 'numeroGuia':
                            data[key] = match.group(1).lstrip('0') or '0'  # Remove zeros √† esquerda
                        elif key == 'codigoBarras':
                            # Limpar o c√≥digo de barras removendo espa√ßos e pontos
                            codigo = re.sub(r'[\s\.]', '', match.group(1))
                            # Garantir que tem pelo menos 44 d√≠gitos
                            if len(codigo) >= 44:
                                data[key] = codigo[:48]  # Limitar a 48 d√≠gitos
                                print(f'Campo {key} encontrado: {data[key]}')
                                break
                        else:
                            data[key] = match.group(1).strip()
                        
                        if data[key]:
                            print(f'Campo {key} encontrado: {data[key]}')
                        break  # Usar o primeiro padr√£o que encontrar

            # Validar se temos os dados m√≠nimos necess√°rios
            if not data.get('inscricao') or (not data.get('valorPrincipal') and not data.get('valorTotal')):
                print('Dados insuficientes extra√≠dos do PDF')
                print('Dados encontrados:', data)
                return None

            # Se n√£o encontrou valor principal, usar valor total
            if not data.get('valorPrincipal') and data.get('valorTotal'):
                data['valorPrincipal'] = data['valorTotal']
                print('Usando valor total como valor principal')

            return data

        except Exception as error:
            print(f'Erro ao extrair dados do PDF: {error}')
            return None

    def generate_sql_insert(self, darm_data):
        """Gerar SQL INSERT para os dados do DARM no formato simplificado para Control-M"""
        try:
            # Converter data de vencimento do formato DD/MM/YYYY para YYYY-MM-DD
            data_vencimento = None
            if darm_data.get('dataVencimento'):
                try:
                    dia, mes, ano = darm_data['dataVencimento'].split('/')
                    data_vencimento = f'{ano}-{mes}-{dia} 00:00:00'
                except:
                    data_vencimento = None

            # Converter compet√™ncia do formato MM/YYYY para YYYY
            competencia = datetime.now().year  # Usar o ano atual dinamicamente

            # Processar valores monet√°rios
            valor_principal = self.parse_monetary_value(darm_data.get('valorPrincipal'))
            valor_total = self.parse_monetary_value(darm_data.get('valorTotal') or darm_data.get('valorPrincipal'))

            # Limitar c√≥digo de barras a 48 d√≠gitos e remover caracteres n√£o num√©ricos
            codigo_barras = None
            if darm_data.get('codigoBarras') and str(darm_data['codigoBarras']):
                codigo_barras = re.sub(r'\D', '', str(darm_data['codigoBarras']))[:48]

            # Usar c√≥digo de receita do PDF ou valor padr√£o
            codigo_receita = darm_data.get('codigoReceita') or 2585  # Valor padr√£o hardcoded
            # Se o c√≥digo de receita tem h√≠fen, converter para n√∫mero
            if isinstance(codigo_receita, str) and '-' in codigo_receita:
                codigo_receita = codigo_receita.replace('-', '')
                print(f'üîß C√≥digo de receita processado: {codigo_receita}')
            
            # For√ßar uso do valor padr√£o se o c√≥digo extra√≠do for inv√°lido
            if isinstance(codigo_receita, str) and len(codigo_receita) > 4:
                print(f'‚ö†Ô∏è  C√≥digo de receita extra√≠do muito longo ({codigo_receita}), usando valor padr√£o 2585')
                codigo_receita = 2585

            # Gerar express√£o SQL para SQ_DOC din√¢mico (6 d√≠gitos: √∫ltimos 3 da guia + √∫ltimos 3 dos millisegundos)
            numero_guia = darm_data.get('numeroGuia', '0')
            if numero_guia != '0':
                numero_guia = self.remove_leading_zeros(numero_guia)
            sq_doc_expression = f"((({numero_guia} % 1000) * 1000) + (UNIX_TIMESTAMP() % 1000)) % 1000000"

            # Validar dados obrigat√≥rios
            inscricao = darm_data.get('inscricao', '')
            if not inscricao:
                print('‚ùå Erro: Inscri√ß√£o n√£o encontrada')
                return None

            # Gerar SQL no formato formatado bonito
            sql = f"""use silfae;

INSERT INTO FarrDarmsPagos (
    id, AA_EXERCICIO, CD_BANCO, NR_BDA, NR_COMPLEMENTO, NR_LOTE_NSA, TP_LOTE_D, SQ_DOC,
    CD_RECEITA, CD_USU_ALT, CD_USU_INCL, DT_ALT, DT_INCL, DT_VENCTO, DT_PAGTO,
    NR_INSCRICAO, NR_GUIA, NR_COMPETENCIA, NR_CODIGO_BARRAS, NR_LOTE_IPTU, ST_DOC_D, TP_IMPOSTO,
    VL_PAGO, VL_RECEITA, VL_PRINCIPAL, VL_MORA, VL_MULTA, VL_MULTAF_TCDL, VL_MULTAP_TSD, VL_INSU_TIP, VL_JUROS,
    processado, criticaProcessamento
) VALUES (
    NULL, {darm_data.get('exercicio', 2025)}, 70, 37, 0, 730, 1, {sq_doc_expression}, {codigo_receita}, NULL, 'FARR', NULL, NOW(), {f"'{data_vencimento}'" if data_vencimento else 'NULL'}, NOW(), '{inscricao}', {self.remove_leading_zeros(darm_data.get('numeroGuia', 'NULL'))}, {competencia or 'NULL'}, {f"'{codigo_barras}'" if codigo_barras else 'NULL'}, NULL, '13', NULL, {valor_total}, {valor_total}, {valor_principal}, 0.00, 0.00, NULL, NULL, NULL, 0.00, 0, NULL
);"""

            # Validar se o SQL foi gerado corretamente
            if not sql or len(sql.strip()) < 50:
                print('‚ùå Erro: SQL gerado est√° vazio ou muito pequeno')
                return None

            print(f'‚úÖ SQL gerado com sucesso para guia {darm_data.get("numeroGuia")}')
            return sql

        except Exception as error:
            print(f'‚ùå Erro ao gerar SQL: {error}')
            return None

    def remove_leading_zeros(self, value):
        """Remove zeros √† esquerda apenas se houver zeros"""
        return value.lstrip('0') or '0'

    def parse_monetary_value(self, value):
        """Converter valor monet√°rio para formato num√©rico com 2 casas decimais, mesmo com ru√≠do"""
        if not value:
            return '0.00'
        
        # Remover tudo que n√£o for n√∫mero, v√≠rgula ou ponto
        clean_value = re.sub(r'[^\d,\.]', '', value)
        
        # Se houver mais de uma v√≠rgula ou ponto, manter s√≥ o √∫ltimo separador decimal
        if clean_value.count(',') > 1 or clean_value.count('.') > 1:
            # Substituir todos os pontos por vazio, exceto o √∫ltimo
            if ',' in clean_value:
                partes = clean_value.split(',')
                clean_value = ''.join(partes[:-1]) + ',' + partes[-1]
            if '.' in clean_value:
                partes = clean_value.split('.')
                clean_value = ''.join(partes[:-1]) + '.' + partes[-1]
        
        # Se tem v√≠rgula, tratar como separador decimal brasileiro
        if ',' in clean_value:
            # Se tem ponto antes da v√≠rgula, √© formato brasileiro (ex: 9.014,06)
            if '.' in clean_value:
                # Remover pontos de milhares e converter v√≠rgula para ponto
                clean_value = clean_value.replace('.', '').replace(',', '.')
            else:
                # S√≥ v√≠rgula, converter para ponto
                clean_value = clean_value.replace(',', '.')
        
        try:
            numeric_value = float(clean_value)
            return f'{numeric_value:.2f}'
        except ValueError:
            return '0.00'

# Fun√ß√£o principal para executar o processador
async def main():
    """Fun√ß√£o principal"""
    processor = DarmProcessor()
    await processor.init()
    await processor.process_darms()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 